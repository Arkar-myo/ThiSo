// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  REJECTED
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

model User {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  email                String       @unique
  username             String       @unique
  password             String
  verified             Boolean      @default(false)
  verificationCode     String?
  verificationExpires  DateTime?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  songs                Song[]
  created              DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  songLikes            SongLike[]
  reports              SongReport[]
  savedSongs           SavedSong[]
  userType             String? // New field for user type (e.g., 'admin' or 'user')
}

model Song {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  singer     String?
  writer     String?
  album      String?
  body       String
  key        String?
  tempo      Int?
  viewCount  Int          @default(0)
  user       User         @relation(fields: [userId], references: [id])
  userId     String       @db.ObjectId
  songLikes  SongLike[]
  created    DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  reports    SongReport[]
  savedSongs SavedSong[]
}

model SongLike {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  song    Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId  String   @db.ObjectId
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String   @db.ObjectId
  created DateTime @default(now())
}

model SongReport {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  song        Song         @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId      String       @db.ObjectId
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String       @db.ObjectId
  reason      String
  description String?
  status      ReportStatus @default(PENDING)
  created     DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model SavedSong {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String   @db.ObjectId
  song    Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId  String   @db.ObjectId
  created DateTime @default(now())
}
